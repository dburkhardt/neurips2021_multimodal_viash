#!/usr/bin/env bash

############################################
#    simulate_dyngen_dataset main_build    #
############################################

# This wrapper script is auto-generated by viash 0.5.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "simulate_dyngen_dataset main_build"
  echo "Generate a synthetic dataset using the standard dyngen simulation workflow."
  echo "For more advanced usage to get more control over the outputted dataset, use the"
  echo "R package. More documentation can be found at https://dyngen.dynverse.org."
  echo
  echo "Options:"

  echo "   --id"
  echo "        type: string, required parameter"
  echo "        example: dyngen_dataset"
  echo "        The id of the output dataset id"
  echo ""


  echo "   --output_rna"
  echo "        type: file, required parameter, output"
  echo "        example: output_rna.h5ad"
  echo "        Output h5ad RNA file."
  echo ""


  echo "   --output_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: output_mod2.h5ad"
  echo "        Output h5ad modality2 file (ATAC or Antibody capture)."
  echo ""


  echo "   -p, --plot"
  echo "        type: file, required parameter, output"
  echo "        example: plot.pdf"
  echo "        A visualisation of the simulation."
  echo ""


  echo "   -b, --backbone"
  echo "        type: string"
  echo "        default: bifurcating"
  echo "        Which dyngen backbone to use for the simulation."
  echo ""


  echo "   --num_cells"
  echo "        type: integer"
  echo "        default: 100"
  echo "        The number of cells to generate."
  echo ""


  echo "   --num_genes"
  echo "        type: integer"
  echo "        default: 100"
  echo "        The number of genes to generate."
  echo ""


  echo "   --num_simulations"
  echo "        type: integer"
  echo "        default: 32"
  echo "        The number of dyngen simulations to run."
  echo ""


  echo "   --census_interval"
  echo "        type: double"
  echo "        default: 4.0"
  echo "        A granularity parameter for the outputted simulation."
  echo ""


  echo "   --ssa_tau"
  echo "        type: double"
  echo "        default: 0.008333"
  echo "        Step size of the GillespieSSA2 simulation. Default is 30/3600."
  echo ""


  echo "   -chromatin, --store_chromatin"
  echo "        type: boolean_true"
  echo "        Whether or not to compute chromatin accessibility data."
  echo ""


  echo "   -protein, --store_protein"
  echo "        type: boolean_true"
  echo "        Whether or not to store protein count information."
  echo ""


  echo "   --num_proteins"
  echo "        type: integer"
  echo "        default: 50"
  echo "        The number of proteins to sample."
  echo ""


  echo "   --num_threads"
  echo "        type: integer"
  echo "        default: 1"
  echo "        Parallellisation level."
  echo ""


  echo "   --cache_dir"
  echo "        type: file"
  echo "        A caching directory for files that dyngen downloads."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "simulate_dyngen_dataset main_build"
            exit
            ;;
        --id)
            VIASH_PAR_ID="$2"
            shift 2
            ;;
        --id=*)
            VIASH_PAR_ID=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_rna)
            VIASH_PAR_OUTPUT_RNA="$2"
            shift 2
            ;;
        --output_rna=*)
            VIASH_PAR_OUTPUT_RNA=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_mod2)
            VIASH_PAR_OUTPUT_MOD2="$2"
            shift 2
            ;;
        --output_mod2=*)
            VIASH_PAR_OUTPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --plot)
            VIASH_PAR_PLOT="$2"
            shift 2
            ;;
        --plot=*)
            VIASH_PAR_PLOT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -p)
            VIASH_PAR_PLOT="$2"
            shift 2
            ;;
        --backbone)
            VIASH_PAR_BACKBONE="$2"
            shift 2
            ;;
        --backbone=*)
            VIASH_PAR_BACKBONE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -b)
            VIASH_PAR_BACKBONE="$2"
            shift 2
            ;;
        --num_cells)
            VIASH_PAR_NUM_CELLS="$2"
            shift 2
            ;;
        --num_cells=*)
            VIASH_PAR_NUM_CELLS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_genes)
            VIASH_PAR_NUM_GENES="$2"
            shift 2
            ;;
        --num_genes=*)
            VIASH_PAR_NUM_GENES=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_simulations)
            VIASH_PAR_NUM_SIMULATIONS="$2"
            shift 2
            ;;
        --num_simulations=*)
            VIASH_PAR_NUM_SIMULATIONS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --census_interval)
            VIASH_PAR_CENSUS_INTERVAL="$2"
            shift 2
            ;;
        --census_interval=*)
            VIASH_PAR_CENSUS_INTERVAL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --ssa_tau)
            VIASH_PAR_SSA_TAU="$2"
            shift 2
            ;;
        --ssa_tau=*)
            VIASH_PAR_SSA_TAU=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --store_chromatin)
            VIASH_PAR_STORE_CHROMATIN=true
            shift 1
            ;;
        -chromatin)
            VIASH_PAR_STORE_CHROMATIN=true
            shift 1
            ;;
        --store_protein)
            VIASH_PAR_STORE_PROTEIN=true
            shift 1
            ;;
        -protein)
            VIASH_PAR_STORE_PROTEIN=true
            shift 1
            ;;
        --num_proteins)
            VIASH_PAR_NUM_PROTEINS="$2"
            shift 2
            ;;
        --num_proteins=*)
            VIASH_PAR_NUM_PROTEINS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --num_threads)
            VIASH_PAR_NUM_THREADS="$2"
            shift 2
            ;;
        --num_threads=*)
            VIASH_PAR_NUM_THREADS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cache_dir)
            VIASH_PAR_CACHE_DIR="$2"
            shift 2
            ;;
        --cache_dir=*)
            VIASH_PAR_CACHE_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_ID" ]; then
  ViashError '--id' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_RNA" ]; then
  ViashError '--output_rna' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_MOD2" ]; then
  ViashError '--output_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_PLOT" ]; then
  ViashError '--plot' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_BACKBONE" ]; then
  VIASH_PAR_BACKBONE="bifurcating"
fi
if [ -z "$VIASH_PAR_NUM_CELLS" ]; then
  VIASH_PAR_NUM_CELLS="100"
fi
if [ -z "$VIASH_PAR_NUM_GENES" ]; then
  VIASH_PAR_NUM_GENES="100"
fi
if [ -z "$VIASH_PAR_NUM_SIMULATIONS" ]; then
  VIASH_PAR_NUM_SIMULATIONS="32"
fi
if [ -z "$VIASH_PAR_CENSUS_INTERVAL" ]; then
  VIASH_PAR_CENSUS_INTERVAL="4.0"
fi
if [ -z "$VIASH_PAR_SSA_TAU" ]; then
  VIASH_PAR_SSA_TAU="0.008333"
fi
if [ -z "$VIASH_PAR_STORE_CHROMATIN" ]; then
  VIASH_PAR_STORE_CHROMATIN="false"
fi
if [ -z "$VIASH_PAR_STORE_PROTEIN" ]; then
  VIASH_PAR_STORE_PROTEIN="false"
fi
if [ -z "$VIASH_PAR_NUM_PROTEINS" ]; then
  VIASH_PAR_NUM_PROTEINS="50"
fi
if [ -z "$VIASH_PAR_NUM_THREADS" ]; then
  VIASH_PAR_NUM_THREADS="1"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-simulate_dyngen_dataset-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(dyngen, quietly = TRUE, warn.conflicts = FALSE)
library(Matrix, quietly = TRUE, warn.conflicts = FALSE)
requireNamespace("anndata", quietly = TRUE)


## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "id" = $( if [ ! -z ${VIASH_PAR_ID+x} ]; then echo "'$VIASH_PAR_ID'"; else echo NULL; fi ),
  "output_rna" = $( if [ ! -z ${VIASH_PAR_OUTPUT_RNA+x} ]; then echo "'$VIASH_PAR_OUTPUT_RNA'"; else echo NULL; fi ),
  "output_mod2" = $( if [ ! -z ${VIASH_PAR_OUTPUT_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_MOD2'"; else echo NULL; fi ),
  "plot" = $( if [ ! -z ${VIASH_PAR_PLOT+x} ]; then echo "'$VIASH_PAR_PLOT'"; else echo NULL; fi ),
  "backbone" = $( if [ ! -z ${VIASH_PAR_BACKBONE+x} ]; then echo "'$VIASH_PAR_BACKBONE'"; else echo NULL; fi ),
  "num_cells" = $( if [ ! -z ${VIASH_PAR_NUM_CELLS+x} ]; then echo "as.integer($VIASH_PAR_NUM_CELLS)"; else echo NULL; fi ),
  "num_genes" = $( if [ ! -z ${VIASH_PAR_NUM_GENES+x} ]; then echo "as.integer($VIASH_PAR_NUM_GENES)"; else echo NULL; fi ),
  "num_simulations" = $( if [ ! -z ${VIASH_PAR_NUM_SIMULATIONS+x} ]; then echo "as.integer($VIASH_PAR_NUM_SIMULATIONS)"; else echo NULL; fi ),
  "census_interval" = $( if [ ! -z ${VIASH_PAR_CENSUS_INTERVAL+x} ]; then echo "as.numeric($VIASH_PAR_CENSUS_INTERVAL)"; else echo NULL; fi ),
  "ssa_tau" = $( if [ ! -z ${VIASH_PAR_SSA_TAU+x} ]; then echo "as.numeric($VIASH_PAR_SSA_TAU)"; else echo NULL; fi ),
  "store_chromatin" = $( if [ ! -z ${VIASH_PAR_STORE_CHROMATIN+x} ]; then echo "as.logical(toupper('$VIASH_PAR_STORE_CHROMATIN'))"; else echo NULL; fi ),
  "store_protein" = $( if [ ! -z ${VIASH_PAR_STORE_PROTEIN+x} ]; then echo "as.logical(toupper('$VIASH_PAR_STORE_PROTEIN'))"; else echo NULL; fi ),
  "num_proteins" = $( if [ ! -z ${VIASH_PAR_NUM_PROTEINS+x} ]; then echo "as.integer($VIASH_PAR_NUM_PROTEINS)"; else echo NULL; fi ),
  "num_threads" = $( if [ ! -z ${VIASH_PAR_NUM_THREADS+x} ]; then echo "as.integer($VIASH_PAR_NUM_THREADS)"; else echo NULL; fi ),
  "cache_dir" = $( if [ ! -z ${VIASH_PAR_CACHE_DIR+x} ]; then echo "'$VIASH_PAR_CACHE_DIR'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

if (par\$store_protein == par\$store_chromatin) {
  cat("Warning: Strictly pass one of --store_protein and --store_chromatin, not neither or both.\\n")
}

cat("Creating dyngen backbone\\n")
backbones <- list_backbones()

if (is.null(par\$backbone)) {
  par\$backbone <- sample(names(backbones), 1)
}

backbone <- backbones[[par\$backbone]]()

cat("Generating regulatory network\\n")
num_tfs <- nrow(backbone\$module_info)
num_targets <- ceiling(0.8 * (par\$num_genes - num_tfs))
num_hks <- par\$num_genes - num_tfs - num_targets
num_cells_train <- round(par\$num_cells * .66)
num_cells_test <- par\$num_cells - num_cells_train

model_init <- initialise_model(
  backbone = backbone,
  num_cells = num_cells_train,
  num_tfs = num_tfs,
  num_targets = num_targets,
  num_hks = num_hks,
  simulation_params = simulation_default(
    census_interval = par\$census_interval,
    ssa_algorithm = ssa_etl(tau = par\$ssa_tau),
    experiment_params = simulation_type_wild_type(
      num_simulations = round(0.66*par\$num_simulations)
    ),
    compute_cellwise_grn = par\$store_chromatin
  ),
  num_cores = par\$num_threads,
  verbose = FALSE,
  download_cache_dir = par\$cache_dir
) %>%
  generate_tf_network() %>%
  generate_feature_network()

cat("Running simulations for training cells\\n")
model_train <-
  model_init %>%
  generate_kinetics() %>%
  generate_gold_standard() %>%
  generate_cells() %>%
  generate_experiment()

cat("Running simulations for test cells\\n")
model_init\$num_cells <-
  model_init\$numbers\$num_cells <-
  num_cells_test
model_init\$simulation_params\$experiment_params <-
  simulation_type_wild_type(round(0.37*par\$num_simulations))
model_test <-
  model_init %>%
  generate_kinetics() %>% # use different kinetics
  generate_gold_standard() %>%
  generate_cells() %>%
  generate_experiment()

cat("Combine simulations into one dataset\\n")
model <- combine_models(
  list(
    batch1 = model_train, 
    batch2 = model_test
  ),
  duplicate_gold_standard = FALSE
)
dataset <- as_list(model)

# verify batch effects
# dat <- as_dyno(model)
# grouping <- dat\$cell_info %>% select(cell_id, model) %>% deframe()
# dynplot::plot_dimred(dat, grouping = grouping)
cat("Create RNA dataset\\n")
celltypes <- dataset\$milestone_percentages %>%
  group_by(cell_id) %>%
  slice(which.max(percentage)) %>%
  ungroup() %>% 
  select(cell_id, cell_type = milestone_id)
obs <- dataset\$cell_info %>% 
  left_join(celltypes, by = "cell_id") %>%
  rename(batch = model) %>%
  column_to_rownames("cell_id")
var <- dataset\$feature_info %>% 
  select(feature_id, module_id, basal, burn, independence, color, is_tf, is_hk) %>% 
  column_to_rownames("feature_id")
ad_mod1 <- anndata::AnnData(
  X = dataset\$counts,
  obs = obs,
  var = var %>% mutate(feature_types = "GEX"),
  uns = list(
    dataset_id = par\$id
  )
)

if (par\$store_protein) {
  cat("Processing Antibody data\\n")
  # construct AbSeq-like data from protein counts
  # TODO: use real AbSeq data to map distributions
  counts_protein <- dataset\$counts_protein
  var_protein <- var %>% mutate(feature_types = "ADT")

  # sample 50 genes
  if (ncol(counts_protein) > par\$num_proteins) {
    sample_genes <- sample.int(ncol(counts_protein), par\$num_proteins)
    counts_protein <- counts_protein[,sample_genes, , drop = FALSE]
    var_protein <- var_protein[sample_genes, , drop = FALSE]
  }

  ad_mod2 <- anndata::AnnData(
    X = counts_protein,
    obs = obs,
    var = var_protein,
    uns = list(
      dataset_id = par\$id
    )
  )
}

if (par\$store_chromatin) {
  cat("Processing ATAC data\\n")
  # constuct atac-like data from single cell regulatory network
  # TODO: use real atac data to map distributions
  mat <- dataset\$regulatory_network_sc %>%
    mutate(
      edge = factor(paste0(as.character(regulator), "->", as.character(target)))
    )
  regsc <- Matrix::sparseMatrix(
    i = as.integer(mat\$cell_id),
    j = as.integer(mat\$edge),
    x = pmax(mat\$strength, 0)*100
  )
  rownames(regsc) <- dataset\$cell_ids
  colnames(regsc) <- paste0("region_", seq_len(ncol(regsc)))
  var_atac <- data.frame(
    row.names = colnames(regsc),
    feature_types = rep("ATAC", ncol(regsc))
  )

  ad_mod2 <- anndata::AnnData(
    X = regsc,
    obs = obs,
    var = var_atac,
    uns = list(
      dataset_id = par\$id,
      organism = "synthetic"
    )
  )
}

cat("Write h5ad files\\n")
ad_mod1\$write_h5ad(par\$output_rna, compression = "gzip")
ad_mod2\$write_h5ad(par\$output_mod2, compression = "gzip")

if (!is.null(par\$plot)) {
  cat("Storing summary plot\\n")
  g <- plot_summary(model)
  ggsave(par\$plot, g, width = 20, height = 16)
}
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
