#!/usr/bin/env bash

#######################################
#    calculate_task1_metrics 0.3.0    #
#######################################

# This wrapper script is auto-generated by viash 0.5.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "calculate_task1_metrics 0.3.0"
  echo "Calculating basic metrics for task1."
  echo
  echo "Options:"

  echo "   -ip, --input_prediction"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: prediction.h5ad"
  echo "        Prediction by a method."
  echo ""


  echo "   -io, --input_solution"
  echo "        type: file, required parameter, multiple values allowed"
  echo "        example: solution.h5ad"
  echo "        Gold standard solution."
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Metric scores by comparing the prediction to the gold standard solution."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "calculate_task1_metrics 0.3.0"
            exit
            ;;
        --input_prediction)
            if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
              VIASH_PAR_INPUT_PREDICTION="$2"
            else
              VIASH_PAR_INPUT_PREDICTION="$VIASH_PAR_INPUT_PREDICTION:""$2"
            fi
            shift 2
            ;;
        --input_prediction=*)
            if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
              VIASH_PAR_INPUT_PREDICTION=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT_PREDICTION="$VIASH_PAR_INPUT_PREDICTION:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -ip)
            if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
              VIASH_PAR_INPUT_PREDICTION="$2"
            else
              VIASH_PAR_INPUT_PREDICTION="$VIASH_PAR_INPUT_PREDICTION:""$2"
            fi
            shift 2
            ;;
        --input_solution)
            if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
              VIASH_PAR_INPUT_SOLUTION="$2"
            else
              VIASH_PAR_INPUT_SOLUTION="$VIASH_PAR_INPUT_SOLUTION:""$2"
            fi
            shift 2
            ;;
        --input_solution=*)
            if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
              VIASH_PAR_INPUT_SOLUTION=$(ViashRemoveFlags "$1")
            else
              VIASH_PAR_INPUT_SOLUTION="$VIASH_PAR_INPUT_SOLUTION:"$(ViashRemoveFlags "$1")
            fi
            shift 1
            ;;
        -io)
            if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
              VIASH_PAR_INPUT_SOLUTION="$2"
            else
              VIASH_PAR_INPUT_SOLUTION="$VIASH_PAR_INPUT_SOLUTION:""$2"
            fi
            shift 2
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_PREDICTION" ]; then
  ViashError '--input_prediction' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
  ViashError '--input_solution' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-calculate_task1_metrics-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Load dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(testthat, quietly = TRUE, warn.conflicts = FALSE)
library(Matrix, quietly = TRUE, warn.conflicts = FALSE)
requireNamespace("anndata", quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_prediction" = $( if [ ! -z ${VIASH_PAR_INPUT_PREDICTION+x} ]; then echo "strsplit('$VIASH_PAR_INPUT_PREDICTION', split = ':')[[1]]"; else echo NULL; fi ),
  "input_solution" = $( if [ ! -z ${VIASH_PAR_INPUT_SOLUTION+x} ]; then echo "strsplit('$VIASH_PAR_INPUT_SOLUTION', split = ':')[[1]]"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

cat("Reading solution info\\n")
sol_info <- map_df(par\$input_solution, function(path) {
  anndata::read_h5ad(path, backed = TRUE)\$uns[c("dataset_id")] %>%
    as_tibble() %>% 
    mutate(sol_path = path)
})
cat("Reading prediction info\\n")
pred_info <- map_df(par\$input_prediction, function(path) {
  anndata::read_h5ad(path, backed = TRUE)\$uns[c("dataset_id", "method_id")] %>%
    as_tibble() %>% 
    mutate(pred_path = path)
})
meta_info <- left_join(
  sol_info %>% crossing(method_id = unique(pred_info\$method_id)),
  pred_info,
  by = c("dataset_id", "method_id")
)


cat("Evaluating predictions\\n")
# list2env(dynutils::extract_row_to_list(meta_info, 1), .GlobalEnv)
out <- pmap_df(meta_info, function(dataset_id, method_id, sol_path, pred_path) {
  
  if (!is.na(pred_path)) {
    cat("Reading ", basename(sol_path), " and ", basename(pred_path), "\\n", sep = "")
    # Read solution h5ad
    adata_solution <- anndata::read_h5ad(sol_path)

    # Read prediction h5ad
    expect_true(
      grepl("\\\\.h5ad\$", pred_path),
      info = "Prediction file should be an h5ad file"
    )
    adata_prediction <-
      tryCatch({
        anndata::read_h5ad(pred_path)
      }, error = function(e) {
        stop(paste0("Can't open prediction h5ad file. Detailed error message:\\n", e\$message))
      })
    expect_true(
      all.equal(dim(adata_solution), dim(adata_prediction)),
      info = "Dataset and prediction anndata objects should have the same shape / dimensions."
    )

    # Wrangle data
    tv <- adata_solution\$X
    pv <- adata_prediction\$X

    # Compute metrics
    rmse <- sqrt(mean((tv - pv) ^ 2))
    score_pearson <- .5 - mean(diag(dynutils::calculate_similarity(tv, pv, method = "pearson", margin = 2, diag = TRUE, drop0 = TRUE))) / 2
    score_spearman <- .5 - mean(diag(dynutils::calculate_similarity(tv, pv, method = "spearman", margin = 2, diag = TRUE, drop0 = TRUE))) / 2
  } else {
    rmse <- Inf
    score_pearson <- 0
    score_spearman <- 0
  }

  tibble(
    dataset_id,
    method_id,
    metric_ids = c("rmse", "score_pearson", "score_spearman"),
    metric_values = c(rmse, score_pearson, score_spearman),
    metric_moreisbetter = c(FALSE, TRUE, TRUE)
  )
})


cat("Create output object\\n")
out <- anndata::AnnData(
  X = NULL,
  shape = list(1L, 1L),
  uns = list(
    dataset_id = out\$dataset_id,
    method_id = out\$method_id,
    metric_ids = out\$metric_ids,
    metric_values = out\$metric_values,
    metric_moreisbetter = out\$metric_moreisbetter
  )
)

cat("Write output to h5ad file\\n")
zzz <- out\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
