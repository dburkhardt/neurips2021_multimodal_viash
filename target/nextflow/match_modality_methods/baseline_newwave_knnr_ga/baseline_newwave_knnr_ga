#!/usr/bin/env bash

#############################################
#    baseline_newwave_knnr_ga main_build    #
#############################################

# This wrapper script is auto-generated by viash 0.5.3 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="baseline_newwave_knnr_ga"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "baseline_newwave_knnr_ga main_build"
  echo "Perform DR with NewWave, predict embedding with KNN regression, and match cells with a GA to minimise pairwise distances."
  echo
  echo "Options:"

  echo "   --input_train_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod1 profiles."
  echo ""


  echo "   --input_train_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod2 profiles."
  echo ""


  echo "   --input_train_sol"
  echo "        type: file, required parameter"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of train mod1&mod2 profiles."
  echo ""


  echo "   --input_test_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod1 profiles."
  echo ""


  echo "   --input_test_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod2 profiles."
  echo ""


  echo "   --n_ga_pop"
  echo "        type: integer"
  echo "        default: 300"
  echo "        Population size of genetic algorithm."
  echo ""


  echo "   --n_ga_iter"
  echo "        type: integer"
  echo "        default: 1000"
  echo "        Number of GA iterations to perform."
  echo ""


  echo "   --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        The predicted pairing of test mod1&mod2 profiles."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "baseline_newwave_knnr_ga main_build"
            exit
            ;;
        --input_train_mod1)
            VIASH_PAR_INPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --input_train_mod1=*)
            VIASH_PAR_INPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_mod2)
            VIASH_PAR_INPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --input_train_mod2=*)
            VIASH_PAR_INPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_train_sol)
            VIASH_PAR_INPUT_TRAIN_SOL="$2"
            shift 2
            ;;
        --input_train_sol=*)
            VIASH_PAR_INPUT_TRAIN_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod1)
            VIASH_PAR_INPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --input_test_mod1=*)
            VIASH_PAR_INPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_test_mod2)
            VIASH_PAR_INPUT_TEST_MOD2="$2"
            shift 2
            ;;
        --input_test_mod2=*)
            VIASH_PAR_INPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_ga_pop)
            VIASH_PAR_N_GA_POP="$2"
            shift 2
            ;;
        --n_ga_pop=*)
            VIASH_PAR_N_GA_POP=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --n_ga_iter)
            VIASH_PAR_N_GA_ITER="$2"
            shift 2
            ;;
        --n_ga_iter=*)
            VIASH_PAR_N_GA_ITER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD1" ]; then
  ViashError '--input_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_MOD2" ]; then
  ViashError '--input_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TRAIN_SOL" ]; then
  ViashError '--input_train_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD1" ]; then
  ViashError '--input_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_TEST_MOD2" ]; then
  ViashError '--input_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_N_GA_POP" ]; then
  VIASH_PAR_N_GA_POP="300"
fi
if [ -z "$VIASH_PAR_N_GA_ITER" ]; then
  VIASH_PAR_N_GA_ITER="1000"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-baseline_newwave_knnr_ga-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Loading dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
requireNamespace("anndata", quietly = TRUE)
requireNamespace("GA", quietly = TRUE)
library(Matrix, warn.conflicts = FALSE, quietly = TRUE)
requireNamespace("NewWave", quietly = TRUE)
requireNamespace("FNN", quietly = TRUE)
requireNamespace("SingleCellExperiment", quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
# get parameters from cli
par <- list(
  "input_train_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD1'"; else echo NULL; fi ),
  "input_train_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_MOD2'"; else echo NULL; fi ),
  "input_train_sol" = $( if [ ! -z ${VIASH_PAR_INPUT_TRAIN_SOL+x} ]; then echo "'$VIASH_PAR_INPUT_TRAIN_SOL'"; else echo NULL; fi ),
  "input_test_mod1" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD1'"; else echo NULL; fi ),
  "input_test_mod2" = $( if [ ! -z ${VIASH_PAR_INPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_TEST_MOD2'"; else echo NULL; fi ),
  "n_ga_pop" = $( if [ ! -z ${VIASH_PAR_N_GA_POP+x} ]; then echo "as.integer($VIASH_PAR_N_GA_POP)"; else echo NULL; fi ),
  "n_ga_iter" = $( if [ ! -z ${VIASH_PAR_N_GA_ITER+x} ]; then echo "as.integer($VIASH_PAR_N_GA_ITER)"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

# get meta parameters
meta <- list(
  functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
  resources_dir = "$VIASH_RESOURCES_DIR"
)

# get resources dir
resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

method_id <- meta\$functionality_name

cat("Reading h5ad files\\n")
input_train_mod1 <- anndata::read_h5ad(par\$input_train_mod1)
input_train_mod2 <- anndata::read_h5ad(par\$input_train_mod2)
input_train_sol <- anndata::read_h5ad(par\$input_train_sol)
input_test_mod1 <- anndata::read_h5ad(par\$input_test_mod1)
input_test_mod2 <- anndata::read_h5ad(par\$input_test_mod2)

# reorder train_mod2 based on known solution
match_train <- input_train_sol\$uns\$pairing_ix + 1

# fetch batch labels
batch1 <- c(as.character(input_train_mod1\$obs\$batch), as.character(input_test_mod1\$obs\$batch))
# don't know batch ordering in input_test_mod2
batch2 <- c(as.character(input_train_mod1\$obs\$batch), rep("unknownbatch", nrow(input_test_mod2)))

cat("Running NewWave\\n")
data1 <- SummarizedExperiment::SummarizedExperiment(
  assays = list(counts = cbind(t(input_train_mod1\$X), t(input_test_mod1\$X))),
  colData = data.frame(batch = factor(batch1))
)
res1 <- NewWave::newWave(
  data1,
  X = "~batch",
  verbose = TRUE,
  K = 10,
  n_gene_disp = 100,
  n_gene_par = 100,
   n_cell_par = 100,
   maxiter_optimize = 5
  )
dr_x1 <- SingleCellExperiment::reducedDim(res1)

data2 <- SummarizedExperiment::SummarizedExperiment(
  assays = list(counts = cbind(t(input_train_mod2\$X[order(match_train), , drop = FALSE]), t(input_test_mod2\$X))),
  colData = data.frame(batch = factor(batch2))
)
res2 <- NewWave::newWave(
  data2,
  X = "~batch",
  verbose = TRUE,
  K = 10,
  n_gene_disp = 100,
  n_gene_par = 100,
  n_cell_par = 100,
  maxiter_optimize = 5
)
dr_x2 <- SingleCellExperiment::reducedDim(res2)

colnames(dr_x1) <- colnames(dr_x2) <- paste0("comp_", seq_len(ncol(dr_x1)))

# # visual checks
# ct1 <- c(as.character(input_train_sol\$obs\$cell_type), as.character(input_test_sol\$obs\$cell_type))
# ct2 <- c(as.character(input_train_sol\$obs\$cell_type), as.character(input_test_sol\$obs\$cell_type[match_test]))
# qplot(dr_x1[,1], dr_x1[,2], colour = factor(batch1))
# qplot(dr_x2[,1], dr_x2[,2], colour = factor(batch2))
# qplot(dr_x1[,1], dr_x1[,2], colour = factor(ct1))
# qplot(dr_x2[,1], dr_x2[,2], colour = factor(ct2))

# split DR matrices
train_ix <- seq_len(nrow(input_train_mod1))
dr_x1_train <- dr_x1[train_ix, , drop = FALSE]
dr_x1_test <- dr_x1[-train_ix, , drop = FALSE]
dr_x2_train <- dr_x2[train_ix, , drop = FALSE]
dr_x2_test <- dr_x2[-train_ix, , drop = FALSE]

cat("Predicting for each column in modality 2\\n")
preds <- apply(dr_x2_train, 2, function(yi) {
  FNN::knn.reg(
    train = dr_x1_train,
    test = dr_x1_test,
    y = yi,
    k = min(15, nrow(dr_x1_test))
  )\$pred
})


# # visual checks
# ggplot() +
#   geom_point(aes(comp_1, comp_2, colour = cell_type), data.frame(rbind(dr_x2, preds)), size = 3, colour = "gray") +
#   geom_point(aes(comp_1, comp_2, colour = cell_type, shape = type), data.frame(dr_x2_train, type = "train", input_train_sol\$obs), size = 3) +
#   geom_point(aes(comp_1, comp_2, colour = cell_type, shape = type), data.frame(dr_x2_test, type = "test", input_test_sol\$obs[match_test, ]), size = 3) +
#   geom_point(aes(comp_1, comp_2, colour = cell_type, shape = type), data.frame(preds, type = "pred", input_test_sol\$obs), size = 3) +
#   facet_wrap(~type) +
#   theme_bw()


cat("Optimising correlation between mod1 distances and mod2 distances\\n")
# x <- sample.int(nrow(dr_x2_test))
fitness <- function(x) {
  - mean((preds - dr_x2_test[x, ])^2)
}
ga_out <- GA::ga(
  type = "permutation",
  fitness = fitness,
  lower = 1,
  upper = nrow(dr_x2_test),
  popSize = par\$n_ga_pop,
  maxiter = par\$n_ga_iter,
  parallel = FALSE,
  monitor = GA:::gaMonitor,
  keepBest = TRUE
)
# ord <- ga_out@solution[1,]

bestSol <- do.call(rbind, ga_out@bestSol)
df <- reshape2::melt(bestSol, varnames = c("iter", "i"), value.name = "j") %>%
  group_by(i, j) %>%
  summarise(value = n(), .groups = "drop") %>%
  arrange(desc(value)) %>%
  head(input_test_mod1\$n_obs * 1000)

# # visual checks
# ord <- order(match_test)
# plot_df <- data.frame(x = preds, dr_x2_test[ord,], input_test_sol\$obs)
# ggplot(plot_df) + 
#   geom_segment(aes(x = comp_1, xend = x.comp_1, y = comp_2, yend = x.comp_2), alpha = .5) +
#   geom_point(aes(comp_1, comp_2, colour = cell_type, shape = "real"), size = 3) +
#   geom_point(aes(x.comp_1, x.comp_2, colour = cell_type, shape = "pred"), size = 3) +
#   theme_bw()

# final_dr <- lmds::lmds(
#   cbind(input_test_mod1\$X, input_test_mod2\$X[ord, , drop = FALSE]),
#   ndim = par\$n_dims,
#   distance_method = par\$distance_method
# )
# # ggplot() + 
# #   geom_point(aes(comp_1, comp_2, colour = cell_type, shape = type), data.frame(final_dr, type = "real", input_test_sol\$obs), size = 3) +
# #   theme_bw()
# knn_out <- FNN::get.knn(final_dr, k = min(999, length(ord)-1))
# knn_index <- cbind(seq_along(ord), knn_out\$nn.index)
# knn_dist <- cbind(rep(0, length(ord)), knn_out\$nn.dist)

# cat("Creating output data structures\\n")
# df <- tibble(
#   i = as.vector(row(knn_index)),
#   j = as.vector(knn_index),
#   x = as.vector(knn_dist)
# ) %>% mutate(
#   j = order(ord)[j],
#   # rescale to get weights from distances
#   y = max(x) * 2 - x
# )
knn_mat <- Matrix::sparseMatrix(
  i = df\$i,
  j = df\$j,
  # x = df\$y,
  x = df\$value,
  dims = list(nrow(dr_x1_test), nrow(dr_x2_test))
)

cat("Creating output anndata\\n")
out <- anndata::AnnData(
  X = as(knn_mat, "CsparseMatrix"),
  uns = list(
    dataset_id = input_train_mod1\$uns[["dataset_id"]],
    method_id = method_id
  )
)

cat("Writing predictions to file\\n")
zzz <- out\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
