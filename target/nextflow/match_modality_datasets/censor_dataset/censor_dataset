#!/usr/bin/env bash

###################################
#    censor_dataset main_build    #
###################################

# This wrapper script is auto-generated by viash 0.5.3dev and is thus a
# derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
# Data Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Louise Deconinck <louise.deconinck@gmail.com> (author, maintainer) {github: LouiseDck, orcid: }

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`

# define meta fields
VIASH_META_FUNCTIONALITY_NAME="censor_dataset"


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "censor_dataset main_build"
  echo "Censor an existing dataset: obfuscate gene names, remove cell identities and"
  echo "shuffle cells of modalities, for distribution to competitors."
  echo
  echo "Options:"

  echo "   --input_mod1"
  echo "        type: file, required parameter"
  echo "        example: dataset.h5ad"
  echo "        The first modality of the input dataset to be censored"
  echo ""


  echo "   --input_mod2"
  echo "        type: file, required parameter"
  echo "        example: dataset.h5ad"
  echo "        The second modality of the input dataset to be censored"
  echo ""


  echo "   --output_train_mod1"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod1 profiles."
  echo ""


  echo "   --output_train_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled train mod2 profiles."
  echo ""


  echo "   --output_train_sol"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of train mod1&mod2 profiles."
  echo ""


  echo "   --output_test_mod1"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod1 profiles."
  echo ""


  echo "   --output_test_mod2"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_censored.h5ad"
  echo "        The censored shuffled test mod2 profiles."
  echo ""


  echo "   --output_test_sol"
  echo "        type: file, required parameter, output"
  echo "        example: dataset_solution.h5ad"
  echo "        The pairing of test mod1&mod2 profiles."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "censor_dataset main_build"
            exit
            ;;
        --input_mod1)
            VIASH_PAR_INPUT_MOD1="$2"
            shift 2
            ;;
        --input_mod1=*)
            VIASH_PAR_INPUT_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --input_mod2)
            VIASH_PAR_INPUT_MOD2="$2"
            shift 2
            ;;
        --input_mod2=*)
            VIASH_PAR_INPUT_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_mod1)
            VIASH_PAR_OUTPUT_TRAIN_MOD1="$2"
            shift 2
            ;;
        --output_train_mod1=*)
            VIASH_PAR_OUTPUT_TRAIN_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_mod2)
            VIASH_PAR_OUTPUT_TRAIN_MOD2="$2"
            shift 2
            ;;
        --output_train_mod2=*)
            VIASH_PAR_OUTPUT_TRAIN_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_train_sol)
            VIASH_PAR_OUTPUT_TRAIN_SOL="$2"
            shift 2
            ;;
        --output_train_sol=*)
            VIASH_PAR_OUTPUT_TRAIN_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_mod1)
            VIASH_PAR_OUTPUT_TEST_MOD1="$2"
            shift 2
            ;;
        --output_test_mod1=*)
            VIASH_PAR_OUTPUT_TEST_MOD1=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_mod2)
            VIASH_PAR_OUTPUT_TEST_MOD2="$2"
            shift 2
            ;;
        --output_test_mod2=*)
            VIASH_PAR_OUTPUT_TEST_MOD2=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_test_sol)
            VIASH_PAR_OUTPUT_TEST_SOL="$2"
            shift 2
            ;;
        --output_test_sol=*)
            VIASH_PAR_OUTPUT_TEST_SOL=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_MOD1" ]; then
  ViashError '--input_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_INPUT_MOD2" ]; then
  ViashError '--input_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD1" ]; then
  ViashError '--output_train_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_MOD2" ]; then
  ViashError '--output_train_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TRAIN_SOL" ]; then
  ViashError '--output_train_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD1" ]; then
  ViashError '--output_test_mod1' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_MOD2" ]; then
  ViashError '--output_test_mod2' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT_TEST_SOL" ]; then
  ViashError '--output_test_sol' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-censor_dataset-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
print("Loading dependencies")
import anndata as ad
import random
import numpy as np
import scipy.sparse

# VIASH START
# The following code has been auto-generated by Viash.
par = {
  'input_mod1': $( if [ ! -z ${VIASH_PAR_INPUT_MOD1+x} ]; then echo "'$VIASH_PAR_INPUT_MOD1'"; else echo None; fi ),
  'input_mod2': $( if [ ! -z ${VIASH_PAR_INPUT_MOD2+x} ]; then echo "'$VIASH_PAR_INPUT_MOD2'"; else echo None; fi ),
  'output_train_mod1': $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD1'"; else echo None; fi ),
  'output_train_mod2': $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_MOD2'"; else echo None; fi ),
  'output_train_sol': $( if [ ! -z ${VIASH_PAR_OUTPUT_TRAIN_SOL+x} ]; then echo "'$VIASH_PAR_OUTPUT_TRAIN_SOL'"; else echo None; fi ),
  'output_test_mod1': $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD1+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD1'"; else echo None; fi ),
  'output_test_mod2': $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_MOD2+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_MOD2'"; else echo None; fi ),
  'output_test_sol': $( if [ ! -z ${VIASH_PAR_OUTPUT_TEST_SOL+x} ]; then echo "'$VIASH_PAR_OUTPUT_TEST_SOL'"; else echo None; fi )
}
meta = {
  'functionality_name': '$VIASH_META_FUNCTIONALITY_NAME',
  'resources_dir': '$VIASH_RESOURCES_DIR'
}

resources_dir = '$VIASH_RESOURCES_DIR'

# VIASH END

print("Reading input data")
mod1 = ad.read_h5ad(par["input_mod1"])
mod2 = ad.read_h5ad(par["input_mod2"])
new_dataset_id = mod1.uns["dataset_id"] + "_MM"

print("Shuffling train cells")
train_ix = np.where(mod1.obs["is_train"])[0]
train_mod1 = mod1[train_ix, :]
train_mod1_ix = list(range(train_mod1.n_obs))
train_mod2_ix = train_mod1_ix.copy()
random.shuffle(train_mod2_ix)
train_mod2 = mod2[train_ix, :][train_mod2_ix, :]

print("Shuffling test cells")
test_ix = np.where(~mod1.obs["is_train"])[0]
test_mod1 = mod1[test_ix, :]
test_mod1_ix = list(range(test_mod1.n_obs))
test_mod2_ix = test_mod1_ix.copy()
random.shuffle(test_mod2_ix)
test_mod2 = mod2[test_ix, :][test_mod2_ix, :]

print("Creating mod1 outputs")
desired_var1_cols = [x for x in ["gene_ids", "feature_types"] if x in mod1.var.columns]
desired_obs_cols = [x for x in ["batch", "size_factors"] if x in mod1.obs.columns]
out_train_mod1 = ad.AnnData(
    X=train_mod1.X,
    obs=train_mod1.obs[desired_obs_cols],
    var=mod1.var[desired_var1_cols],
    uns={ "dataset_id": new_dataset_id },
)
out_train_mod1.X.sort_indices()
out_test_mod1 = ad.AnnData(
    X=test_mod1.X,
    obs=test_mod1.obs[desired_obs_cols],
    var=mod1.var[desired_var1_cols],
    uns={ "dataset_id": new_dataset_id },
)
out_test_mod1.X.sort_indices()

print("Creating mod2 outputs")
desired_var2_cols = [x for x in ["gene_ids", "feature_types"] if x in mod2.var.columns]
out_train_mod2 = ad.AnnData(
    X=train_mod2.X,
    var=mod2.var[desired_var2_cols],
    uns={ "dataset_id": new_dataset_id },
)
out_train_mod2.X.sort_indices()
out_test_mod2 = ad.AnnData(
    X=test_mod2.X,
    var=mod2.var[desired_var2_cols],
    uns={ "dataset_id": new_dataset_id },
)
out_test_mod2.X.sort_indices()

print("Creating solution outputs")
out_train_sol_mat = scipy.sparse.csr_matrix(
  (np.ones(train_mod1.n_obs), (train_mod1_ix, np.argsort(train_mod2_ix)))
)
out_train_sol = ad.AnnData(
    X=out_train_sol_mat,
    obs=train_mod1.obs,
    uns={ "dataset_id": new_dataset_id, "pairing_ix": train_mod2_ix },
    dtype="float32",
)
out_test_sol_mat = scipy.sparse.csr_matrix(
  (np.ones(test_mod1.n_obs), (test_mod1_ix, np.argsort(test_mod2_ix)))
)
out_test_sol = ad.AnnData(
    X=out_test_sol_mat,
    obs=test_mod1.obs,
    uns={ "dataset_id": new_dataset_id, "pairing_ix": test_mod2_ix},
    dtype="float32"
)

print("Writing output objects to file")
out_train_mod1.write_h5ad(filename=par["output_train_mod1"], compression="gzip")
out_train_mod2.write_h5ad(filename=par["output_train_mod2"], compression="gzip")
out_train_sol.write_h5ad(filename=par["output_train_sol"], compression="gzip")
out_test_mod1.write_h5ad(filename=par["output_test_mod1"], compression="gzip")
out_test_mod2.write_h5ad(filename=par["output_test_mod2"], compression="gzip")
out_test_sol.write_h5ad(filename=par["output_test_sol"], compression="gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

python "\$tempscript"

VIASHEOF
