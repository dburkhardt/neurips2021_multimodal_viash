#!/usr/bin/env bash

#######################################
#    create_starter_kit main_build    #
#######################################

# This wrapper script is auto-generated by viash 0.5.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "create_starter_kit main_build"
  echo "Create a starter kit."
  echo
  echo "Options:"

  echo "   --input_dir"
  echo "        type: file, required parameter"
  echo "        example: src/predict_modality/starter_kit/starter_kit_r/"
  echo ""


  echo "   --task"
  echo "        type: string, required parameter"
  echo "        example: predict_modality"
  echo ""


  echo "   --task_name"
  echo "        type: string, required parameter"
  echo "        example: Predict Modality"
  echo ""


  echo "   --language"
  echo "        type: string, required parameter"
  echo "        example: r"
  echo ""


  echo "   --language_name"
  echo "        type: string, required parameter"
  echo "        example: R"
  echo ""


  echo "   --block_starter"
  echo "        type: string, required parameter"
  echo "        example: par <- list("
  echo ""


  echo "   --evalai_phase"
  echo "        type: string, required parameter"
  echo "        example: 2276"
  echo ""


  echo "   --memory"
  echo "        type: string"
  echo "        default: 16 GB"
  echo ""


  echo "   --time"
  echo "        type: string"
  echo "        default: 10m"
  echo ""


  echo "   --cpus"
  echo "        type: string"
  echo "        default: 4"
  echo ""


  echo "   --pipeline_version"
  echo "        type: string"
  echo "        default: 0.4.0"
  echo ""


  echo "   --output_dir"
  echo "        type: file, output"
  echo "        default: output/starter_kits"
  echo ""


  echo "   --bin"
  echo "        type: file"
  echo "        default: bin"
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "create_starter_kit main_build"
            exit
            ;;
        --input_dir)
            VIASH_PAR_INPUT_DIR="$2"
            shift 2
            ;;
        --input_dir=*)
            VIASH_PAR_INPUT_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --task)
            VIASH_PAR_TASK="$2"
            shift 2
            ;;
        --task=*)
            VIASH_PAR_TASK=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --task_name)
            VIASH_PAR_TASK_NAME="$2"
            shift 2
            ;;
        --task_name=*)
            VIASH_PAR_TASK_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --language)
            VIASH_PAR_LANGUAGE="$2"
            shift 2
            ;;
        --language=*)
            VIASH_PAR_LANGUAGE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --language_name)
            VIASH_PAR_LANGUAGE_NAME="$2"
            shift 2
            ;;
        --language_name=*)
            VIASH_PAR_LANGUAGE_NAME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --block_starter)
            VIASH_PAR_BLOCK_STARTER="$2"
            shift 2
            ;;
        --block_starter=*)
            VIASH_PAR_BLOCK_STARTER=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --evalai_phase)
            VIASH_PAR_EVALAI_PHASE="$2"
            shift 2
            ;;
        --evalai_phase=*)
            VIASH_PAR_EVALAI_PHASE=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --memory)
            VIASH_PAR_MEMORY="$2"
            shift 2
            ;;
        --memory=*)
            VIASH_PAR_MEMORY=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --time)
            VIASH_PAR_TIME="$2"
            shift 2
            ;;
        --time=*)
            VIASH_PAR_TIME=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --cpus)
            VIASH_PAR_CPUS="$2"
            shift 2
            ;;
        --cpus=*)
            VIASH_PAR_CPUS=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --pipeline_version)
            VIASH_PAR_PIPELINE_VERSION="$2"
            shift 2
            ;;
        --pipeline_version=*)
            VIASH_PAR_PIPELINE_VERSION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --output_dir)
            VIASH_PAR_OUTPUT_DIR="$2"
            shift 2
            ;;
        --output_dir=*)
            VIASH_PAR_OUTPUT_DIR=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        --bin)
            VIASH_PAR_BIN="$2"
            shift 2
            ;;
        --bin=*)
            VIASH_PAR_BIN=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_DIR" ]; then
  ViashError '--input_dir' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TASK" ]; then
  ViashError '--task' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_TASK_NAME" ]; then
  ViashError '--task_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_LANGUAGE" ]; then
  ViashError '--language' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_LANGUAGE_NAME" ]; then
  ViashError '--language_name' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_BLOCK_STARTER" ]; then
  ViashError '--block_starter' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_EVALAI_PHASE" ]; then
  ViashError '--evalai_phase' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_MEMORY" ]; then
  VIASH_PAR_MEMORY="16 GB"
fi
if [ -z "$VIASH_PAR_TIME" ]; then
  VIASH_PAR_TIME="10m"
fi
if [ -z "$VIASH_PAR_CPUS" ]; then
  VIASH_PAR_CPUS="4"
fi
if [ -z "$VIASH_PAR_PIPELINE_VERSION" ]; then
  VIASH_PAR_PIPELINE_VERSION="0.4.0"
fi
if [ -z "$VIASH_PAR_OUTPUT_DIR" ]; then
  VIASH_PAR_OUTPUT_DIR="output/starter_kits"
fi
if [ -z "$VIASH_PAR_BIN" ]; then
  VIASH_PAR_BIN="bin"
fi


cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-create_starter_kit-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
#!/bin/bash

set -e

## VIASH START
# The following code has been auto-generated by Viash.
par_input_dir='$VIASH_PAR_INPUT_DIR'
par_task='$VIASH_PAR_TASK'
par_task_name='$VIASH_PAR_TASK_NAME'
par_language='$VIASH_PAR_LANGUAGE'
par_language_name='$VIASH_PAR_LANGUAGE_NAME'
par_block_starter='$VIASH_PAR_BLOCK_STARTER'
par_evalai_phase='$VIASH_PAR_EVALAI_PHASE'
par_memory='$VIASH_PAR_MEMORY'
par_time='$VIASH_PAR_TIME'
par_cpus='$VIASH_PAR_CPUS'
par_pipeline_version='$VIASH_PAR_PIPELINE_VERSION'
par_output_dir='$VIASH_PAR_OUTPUT_DIR'
par_bin='$VIASH_PAR_BIN'

resources_dir="$VIASH_RESOURCES_DIR"

## VIASH END

output_dir="\$par_output_dir/starter_kit-\$par_task-\$par_language"

echo remove previous results
[[ -d \$output_dir ]] && rm -r \$output_dir

echo create new output dir
mkdir -p \$output_dir

echo copy template files
cp \$resources_dir/template_files/README.md \$output_dir/
cp \$resources_dir/template_files/generate_submission.sh \$output_dir/
cp \$resources_dir/template_files/nextflow.config \$output_dir/
cp \$resources_dir/template_files/LICENSE \$output_dir/
cp \$resources_dir/template_files/.gitignore \$output_dir/

echo replace terms in templates
sed -i "s#\\\\\\\$par_task_name#\$par_task_name#g" \$output_dir/*
sed -i "s#\\\\\\\$par_task#\$par_task#g" \$output_dir/*
sed -i "s#\\\\\\\$par_language_name#\$par_language_name#g" \$output_dir/*
sed -i "s#\\\\\\\$par_language#\$par_language#g" \$output_dir/*
sed -i "s#\\\\\\\$par_evalai_phase#\$par_evalai_phase#g" \$output_dir/*
sed -i "s#\\\\\\\$par_memory#\$par_memory#g" \$output_dir/*
sed -i "s#\\\\\\\$par_time#\$par_time#g" \$output_dir/*
sed -i "s#\\\\\\\$par_cpus#\$par_cpus#g" \$output_dir/*
sed -i "s#\\\\\\\$par_pipeline_version#\$par_pipeline_version#g" \$output_dir/*
sed -i "s#\\\\\\\$par_block_starter#\$par_block_starter#g" \$output_dir/*

echo run viash dockerfile
dockerfile=\$(viash run \$par_input_dir/config.vsh.yaml -- ---dockerfile | sed 's#^#\\t#' | sed ':a;N;\$!ba;s/\\n/\\\\n/g' | sed 's#&#\\\\\\&#g')
sed -i "s~\\\\\\\$codeblock_dockerfile~\$dockerfile~g" \$output_dir/*

echo copy executables
mkdir \$output_dir/bin
cp \$par_bin/viash \$output_dir/bin/
cp \$par_bin/nextflow \$output_dir/bin/

echo copy scripts
cp \$par_input_dir/* \$output_dir

echo copy sample resources
mkdir -p \$output_dir/sample_data/
cp \$resources_dir/resources_test/\$par_task/test_resource.mod[12].h5ad \$output_dir/sample_data/

echo zipping starter kit
[ -f \${output_dir}.zip ] && rm \${output_dir}.zip
cd  \${output_dir} && zip -9 -r ../\$(basename \$output_dir).zip *

echo starter kit is done!
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

bash "\$tempscript"

VIASHEOF
