#!/usr/bin/env bash

####################################
#    calculate_auroc main_build    #
####################################

# This wrapper script is auto-generated by viash 0.5.1 and is thus a derivative
# work thereof. This software comes with ABSOLUTELY NO WARRANTY from Data
# Intuitive.  The component may contain files which fall under a different
# license. The authors of this component should specify the license in the
# header of such files, or include a separate license file detailing the
# licenses of all included files.
#
# Component authors:
# * Robrecht Cannoodt <rcannood@gmail.com> (author, maintainer) {github: rcannood, orcid: 0000-0003-3641-729X}
# * Louise Deconinck <louise.deconinck@gmail.com> (author) {github: LouiseDck}

set -e

if [ -z "$VIASH_TEMP" ]; then
  VIASH_TEMP=/tmp
fi

# define helper functions
# ViashQuote: put quotes around non flag values
# $1     : unquoted string
# return : possibly quoted string
# examples:
#   ViashQuote --foo      # returns --foo
#   ViashQuote bar        # returns 'bar'
#   Viashquote --foo=bar  # returns --foo='bar'
function ViashQuote {
  if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
    echo "$1" | sed "s#=\(.*\)#='\1'#"
  elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
    echo "$1"
  else
    echo "'$1'"
  fi
}
# ViashRemoveFlags: Remove leading flag
# $1     : string with a possible leading flag
# return : string without possible leading flag
# examples:
#   ViashRemoveFlags --foo=bar  # returns bar
function ViashRemoveFlags {
  echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
}
# ViashSourceDir: return the path of a bash file, following symlinks
# usage   : ViashSourceDir ${BASH_SOURCE[0]}
# $1      : Should always be set to ${BASH_SOURCE[0]}
# returns : The absolute path of the bash file
function ViashSourceDir {
  SOURCE="$1"
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
}
VIASH_VERBOSITY=5

# see https://en.wikipedia.org/wiki/Syslog#Severity_level

# ViashLog: Log events depending on the verbosity level
# usage: ViashLog 1 alert Oh no something went wrong!
# $1: required verbosity level
# $2: display tag
# $3+: messages to display
# stdout: Your input, prepended by '[$2] '. 
function ViashLog {
  local required_level="$1"
  local display_tag="$2"
  shift 2
  if [ $VIASH_VERBOSITY -ge $required_level ]; then
    echo "[$display_tag]" "$@"
  fi
}

# ViashEmergency: log events when the system is unstable
# usage: ViashEmergency Oh no something went wrong.
# stdout: Your input, prepended by '[emergency] '. 
function ViashEmergency {
  ViashLog 0 emergency $@
}

# ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
# usage: ViashAlert Oh no something went wrong.
# stdout: Your input, prepended by '[alert] '. 
function ViashAlert {
  ViashLog 1 alert $@
}

# ViashCritical: log events when a critical condition occurs
# usage: ViashCritical Oh no something went wrong.
# stdout: Your input, prepended by '[critical] '. 
function ViashCritical {
  ViashLog 2 critical $@
}

# ViashError: log events when an error condition occurs
# usage: ViashError Oh no something went wrong.
# stdout: Your input, prepended by '[error] '. 
function ViashError {
  ViashLog 3 error $@
}

# ViashWarning: log potentially abnormal events
# usage: ViashWarning Something may have gone wrong.
# stdout: Your input, prepended by '[warning] '. 
function ViashWarning {
  ViashLog 4 warning $@
}

# ViashNotice: log significant but normal events
# usage: ViashNotice This just happened.
# stdout: Your input, prepended by '[notice] '. 
function ViashNotice {
  ViashLog 5 notice $@
}

# ViashInfo: log normal events
# usage: ViashInfo This just happened.
# stdout: Your input, prepended by '[info] '. 
function ViashInfo {
  ViashLog 6 info $@
}

# ViashDebug: log all events, for debugging purposes
# usage: ViashDebug This just happened.
# stdout: Your input, prepended by '[debug] '. 
function ViashDebug {
  ViashLog 7 debug $@
}

# find source folder of this component
VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`


# ViashHelp: Display helpful explanation about this executable
function ViashHelp {
  echo "calculate_auroc main_build"
  echo "Calculating basic metrics for task2."
  echo
  echo "Options:"

  echo "   -ip, --input_prediction"
  echo "        type: file"
  echo "        example: prediction.h5ad"
  echo "        Prediction by a method."
  echo ""


  echo "   -io, --input_solution"
  echo "        type: file, required parameter"
  echo "        example: solution.h5ad"
  echo "        Gold standard solution."
  echo ""


  echo "   -o, --output"
  echo "        type: file, required parameter, output"
  echo "        example: output.h5ad"
  echo "        Metric scores by comparing the prediction to the gold standard solution."
  echo ""

}

# initialise array
VIASH_POSITIONAL_ARGS=''

while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            ViashHelp
            exit
            ;;
        -v|--verbose)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
            shift 1
            ;;
        -vv)
            let "VIASH_VERBOSITY=VIASH_VERBOSITY+2"
            shift 1
            ;;
        --verbosity)
            VIASH_VERBOSITY="$2"
            shift 2
            ;;
        --verbosity=*)
            VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
            shift 1
            ;;
        --version)
            echo "calculate_auroc main_build"
            exit
            ;;
        --input_prediction)
            VIASH_PAR_INPUT_PREDICTION="$2"
            shift 2
            ;;
        --input_prediction=*)
            VIASH_PAR_INPUT_PREDICTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -ip)
            VIASH_PAR_INPUT_PREDICTION="$2"
            shift 2
            ;;
        --input_solution)
            VIASH_PAR_INPUT_SOLUTION="$2"
            shift 2
            ;;
        --input_solution=*)
            VIASH_PAR_INPUT_SOLUTION=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -io)
            VIASH_PAR_INPUT_SOLUTION="$2"
            shift 2
            ;;
        --output)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        --output=*)
            VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
            shift 1
            ;;
        -o)
            VIASH_PAR_OUTPUT="$2"
            shift 2
            ;;
        *)  # positional arg or unknown option
            # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
            VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
            shift # past argument
            ;;
    esac
done

# parse positional parameters
eval set -- $VIASH_POSITIONAL_ARGS



# check whether required parameters exist
if [ -z "$VIASH_PAR_INPUT_SOLUTION" ]; then
  ViashError '--input_solution' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi
if [ -z "$VIASH_PAR_OUTPUT" ]; then
  ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
  exit 1
fi



cat << VIASHEOF | bash
set -e
tempscript=\$(mktemp "$VIASH_TEMP/viash-run-calculate_auroc-XXXXXX")
function clean_up {
  rm "\$tempscript"
}
trap clean_up EXIT
cat > "\$tempscript" << 'VIASHMAIN'
cat("Load dependencies\\n")
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(testthat, quietly = TRUE, warn.conflicts = FALSE)
library(Matrix, quietly = TRUE, warn.conflicts = FALSE)
requireNamespace("anndata", quietly = TRUE)
requireNamespace("pracma", quietly = TRUE)

## VIASH START
# The following code has been auto-generated by Viash.
par <- list(
  "input_prediction" = $( if [ ! -z ${VIASH_PAR_INPUT_PREDICTION+x} ]; then echo "'$VIASH_PAR_INPUT_PREDICTION'"; else echo NULL; fi ),
  "input_solution" = $( if [ ! -z ${VIASH_PAR_INPUT_SOLUTION+x} ]; then echo "'$VIASH_PAR_INPUT_SOLUTION'"; else echo NULL; fi ),
  "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
)

resources_dir = "$VIASH_RESOURCES_DIR"

## VIASH END

cat("Read solution h5ad\\n")
ad_sol <- anndata::read_h5ad(par\$input_solution)

cat("Read prediction h5ad\\n")
expect_true(
  grepl("\\\\.h5ad\$", par\$input_prediction),
  info = "Prediction file should be an h5ad file"
)
ad_pred <-
  tryCatch({
    anndata::read_h5ad(par\$input_prediction)
  }, error = function(e) {
    stop(paste0("Can't open prediction h5ad file. Detailed error message:\\n", e\$message))
  })
expect_true(
  ad_sol\$uns\$dataset_id == ad_pred\$uns\$dataset_id
)

cat("Data wrangling\\n")
sol_summ <- summary(ad_sol\$X) %>% 
  as_tibble() %>% 
  filter(x != 0)
pred_summ <- summary(ad_pred\$X) %>% 
  left_join(sol_summ %>% rename(gold = x), by = c("i", "j")) %>%
  as_tibble() %>% 
  arrange(desc(x))

expect_true(
  nrow(pred_summ) <= 100 * nrow(sol_summ),
  info = "Number of non-zero values for the prediction should be less or equal to 100 times the number of cells in the dataset."
)

cat("Calculate area under the curve\\n")
values <- pred_summ\$x
are_true <- !is.na(pred_summ\$gold)
num_positive_interactions <- nrow(sol_summ)
num_possible_interactions <- nrow(ad_sol) * nrow(ad_sol)
extend_by <- 10000

ord <- order(rank(values, ties.method = "random"), decreasing = T)
values <- values[ord]
are_true <- are_true[ord]

# calculate base statistics
num_selected <- seq_along(are_true)
tp <- cumsum(are_true)
fp <- num_selected - tp
length_ranking <- length(tp)
num_negative_interactions <- num_possible_interactions - num_positive_interactions

# extend base statistics, if necessary
if (extend_by > 0 && length_ranking != num_possible_interactions) {
  diff.predictions <- num_possible_interactions - length_ranking
  diff.trues <- num_positive_interactions - tail(tp, 1)
  diff.negs <- num_negative_interactions - tail(fp, 1)

  multiplier <- seq_len(extend_by) / extend_by

  extra_num_selected <- multiplier * diff.predictions + tail(num_selected, 1)
  extra_tp <- multiplier * diff.trues + tail(tp, 1)
  extra_fp <- multiplier * diff.negs + tail(fp, 1)

  num_selected <- c(num_selected, extra_num_selected)
  are_true <- c(are_true, rep(NA, extend_by))
  tp <- c(tp, extra_tp)
  fp <- c(fp, extra_fp)
}

# calculate extended statistics
metrics <- tibble(
  num_selected = c(0, num_selected),
  are_true = c(NA, are_true),
  tp = c(0, tp),
  fp = c(0, fp),
  fn = num_positive_interactions - tp,
  tn = num_negative_interactions - fp,
  acc = (tp + tn) / (num_positive_interactions + num_negative_interactions),
  tpr = tp / num_positive_interactions,
  spec = tn / num_negative_interactions,
  prec = ifelse(num_selected == 0, 1, tp / (tp + fp)),
  npv = tn / (tn + fn),
  f1 = 2 * tp / (2 * tp + fp + fn),
  mcc = ifelse(num_selected == 0, 0, (tp * tn - fp * fn) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))),
  informedness = tpr + spec - 1,
  markedness = prec + npv - 1
)

# calculate area under the curves
area_under <- tibble(
  auroc = pracma::trapz(1 - metrics\$spec, metrics\$tpr),
  aupr = abs(pracma::trapz(metrics\$tpr, metrics\$prec)),
  F1 = ifelse(auroc + aupr != 0, 2 * auroc * aupr / (auroc + aupr), 0)
)

# GENIE3bis::plot_curves(list(area_under = area_under, metrics = metrics))

cat("Create output object\\n")
values <- as.list(area_under)

out <- anndata::AnnData(
  X = NULL,
  shape = dim(ad_sol),
  uns = list(
    dataset_id = ad_pred\$uns\$dataset_id,
    method_id = ad_pred\$uns\$method_id,
    metric_ids = names(values),
    metric_values = as.numeric(values)
  )
)

# should we also save the metrics object?
# this would allow for plotting the auroc and aupr curves afterwards.

cat("Write output to h5ad file\\n")
zzz <- out\$write_h5ad(par\$output, compression = "gzip")
VIASHMAIN
PATH="$VIASH_RESOURCES_DIR:\$PATH"

Rscript "\$tempscript"

VIASHEOF
